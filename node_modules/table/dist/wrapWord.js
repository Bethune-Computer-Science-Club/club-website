"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
<<<<<<< Updated upstream
exports.wrapWord = void 0;
const slice_ansi_1 = __importDefault(require("slice-ansi"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const calculateStringLengths = (input, size) => {
    let subject = strip_ansi_1.default(input);
=======
const slice_ansi_1 = __importDefault(require("slice-ansi"));
const string_width_1 = __importDefault(require("string-width"));
exports.default = (input, size) => {
    let subject = input;
>>>>>>> Stashed changes
    const chunks = [];
    // https://regex101.com/r/gY5kZ1/1
    const re = new RegExp('(^.{1,' + String(size) + '}(\\s+|$))|(^.{1,' + String(size - 1) + '}(\\\\|/|_|\\.|,|;|-))');
    do {
        let chunk;
<<<<<<< Updated upstream
        const match = re.exec(subject);
        if (match) {
            chunk = match[0];
            subject = subject.slice(chunk.length);
            const trimmedLength = chunk.trim().length;
            const offset = chunk.length - trimmedLength;
            chunks.push([trimmedLength, offset]);
        }
        else {
            chunk = subject.slice(0, size);
            subject = subject.slice(size);
            chunks.push([chunk.length, 0]);
        }
    } while (subject.length);
    return chunks;
};
const wrapWord = (input, size) => {
    const result = [];
    let startIndex = 0;
    calculateStringLengths(input, size).forEach(([length, offset]) => {
        result.push(slice_ansi_1.default(input, startIndex, startIndex + length));
        startIndex += length + offset;
    });
    return result;
};
exports.wrapWord = wrapWord;
=======
        chunk = re.exec(subject);
        if (chunk) {
            chunk = chunk[0];
            subject = slice_ansi_1.default(subject, string_width_1.default(chunk));
            chunk = chunk.trim();
        }
        else {
            chunk = slice_ansi_1.default(subject, 0, size);
            subject = slice_ansi_1.default(subject, size);
        }
        chunks.push(chunk);
    } while (string_width_1.default(subject));
    return chunks;
};
>>>>>>> Stashed changes
